@model Capstone.Models.Ordini
@{
    ViewBag.Title = "Carrello";
    decimal iva = 0.22M; // Assumendo che l'IVA sia del 22%
}

<div class="row">
    <div class="col-md-8" style="max-height: 700px; overflow-y: auto;">
        <h2 class="mt-3">Il Tuo Carrello</h2>
        @{
            decimal sommaTotaleSenzaIVA = 0;
            decimal sommaTotaleConIVA = 0; // Somma totale con IVA
            if (ViewBag.UserCart != null && ViewBag.UserCart.Count > 0)
            {
                foreach (var item in ViewBag.UserCart)
                {
                    sommaTotaleSenzaIVA += item.Vino.Prezzo * item.Quantita;
                }
                sommaTotaleConIVA = sommaTotaleSenzaIVA * (1 + iva); // Calcolo della somma totale con IVA
            }
        }

        @if (ViewBag.UserCart != null && ViewBag.UserCart.Count > 0)
        {
            <div class="d-flex justify-content-end">
                <div class="text-right">
                    <h4>Somma Totale senza IVA: @sommaTotaleSenzaIVA.ToString("C")</h4>
                    <h4>Somma Totale con IVA: @sommaTotaleConIVA.ToString("C")</h4>
                </div>
            </div>
            <div class="d-flex flex-wrap">
                @foreach (var item in ViewBag.UserCart)
                {
                    <div class="card m-2" style="width: 15rem;">
                        <img src="@item.Vino.Img" class="card-img" alt="@item.Vino.Nome">
                        <div class="card-body">
                            <h5 class="card-title">@item.Vino.Nome</h5>
                            <p class="card-text">@Html.Raw(item.Vino.Prezzo.ToString("C"))</p>
                        </div>
                        <div class="card-footer d-flex justify-content-between align-items-center">
                            @using (Html.BeginForm("AggiornaQuantita", "OrdVini", FormMethod.Post, new { @class = "form-inline" }))
                            {
                                <input type="hidden" name="vinoId" value="@item.Vino.VinoId" />
                                <button type="submit" name="operazione" value="incrementa" class="btn btn-outline-primary btn-sm"><i class="fa fa-plus"></i></button>
                                <span class="mx-2">@item.Quantita</span>
                                <button type="submit" name="operazione" value="decrementa" class="btn btn-outline-secondary btn-sm"><i class="fa fa-minus"></i></button>
                            }
                            @using (Html.BeginForm("RimuoviDalCarrello", "OrdVini", FormMethod.Post, new { @class = "form-inline" }))
                            {
                                <input type="hidden" name="vinoId" value="@item.Vino.VinoId" />
                                <button type="submit" class="btn btn-outline-danger btn-sm"><i class="fa fa-trash"></i>Cancella</button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p  style="margin-bottom:50%;">Il carrello è vuoto</p>
        }
    </div>

    <div class="col-md-4">
        @if (ViewBag.UserCart != null && ViewBag.UserCart.Count > 0)
        {
            using (Html.BeginForm("CreateOrderFromCart", "OrdVini", FormMethod.Post, new { @class = "form-horizontal", id = "orderForm" }))
            {
                @Html.AntiForgeryToken()

                <h4 class="my-2">Ordina</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group mb-2">
                    @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", id = "nome", required = "required" } })
                        @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group mb-2">
                    @Html.LabelFor(model => model.Cognome, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Cognome, new { htmlAttributes = new { @class = "form-control", id = "cognome", required = "required" } })
                        @Html.ValidationMessageFor(model => model.Cognome, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group mb-2">
                    @Html.LabelFor(model => model.Indirizzo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Indirizzo, new { htmlAttributes = new { @class = "form-control", id = "indirizzo", required = "required" } })
                        @Html.ValidationMessageFor(model => model.Indirizzo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div id="orderValidationMessage" class="text-danger" style="display: none;">
                    Assicurati di inserire il Nome, il Cognome e l'Indirizzo.
                </div>

                if (ViewBag.Pagamento != null)
                {

                    <div class="form-group mb-2">
                        @Html.LabelFor(model => model.PagamentoId, "Tipologia Pagamento", htmlAttributes: new { @class = "control-label col-md-6" })
                        <div class="col-md-10">
                            @Html.DropDownList("PagamentoId", ViewBag.Pagamento as IEnumerable<SelectListItem>, htmlAttributes: new { @class = "form-control", id = "metodoPagamento" })
                            @Html.ValidationMessageFor(model => model.PagamentoId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div id="datiCarta">
                        <div class="form-group mb-2">
                            <label for="numeroCarta" class="control-label col-md-6">Numero Carta</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" id="numeroCarta" name="numeroCarta" placeholder="Numero Carta" required="required">
                            </div>
                        </div>

                        <div class="form-group mb-2">
                            <label for="scadenzaCarta" class="control-label col-md-6">Scadenza Carta</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" id="scadenzaCarta" name="scadenzaCarta" placeholder="MM/YY" required="required">
                            </div>
                        </div>

                        <div class="form-group mb-2">
                            <label for="cvv" class="control-label col-md-2">CVV</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" id="cvv" name="cvv" placeholder="CVV" required="required">
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <p>Metodi di pagamento non disponibili.</p>
                }

                <div class="form-group my-2">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Conferma Ordine" class="btn btn-success" />
                    </div>
                </div>
            }
        }
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
    
    $(document).ready(function () {
        $('#metodoPagamento').change(function () {
            var selectedMethod = $(this).val();
            if (selectedMethod == "6") { // Assumendo che "6" sia l'ID per "Carta di Credito"
                $('#datiCarta').show();
                $('#numeroCarta, #scadenzaCarta, #cvv').prop('required', true);
            } else if (selectedMethod == "7") { // Assumendo che "7" sia l'ID per PayPal
                $('#datiCarta').hide();
                $('#numeroCarta, #scadenzaCarta, #cvv').prop('required', false);
            } else {
                $('#datiCarta').hide();
                $('#numeroCarta, #scadenzaCarta, #cvv').prop('required', false);
            }
        });

        var inputScadenza = document.getElementById('scadenzaCarta');
        inputScadenza.addEventListener('input', function () {
            var value = this.value.replace(/[^0-9\/]/g, '');
            if ((value.match(/\//g) || []).length > 1) {
                value = value.substring(0, value.length - 1);
            }
            if (value.indexOf('/') > 0) {
                var parts = value.split('/');
                if (parts[1].length > 2) {
                    parts[1] = parts[1].substring(0, 2);
                }
                value = parts.join('/');
            }
            if (value.length > 5) {
                value = value.substring(0, 5);
            }
            this.value = value;

            if (!/^(\d{2}\/\d{2})$/.test(value) && value.length === 5) {
                alert("Formato data non valido. Inserire nel formato MM/YY.");
                this.value = '';
            }
        });

        var inputCVV = document.getElementById('cvv');
        var inputNumeroCarta = document.getElementById('numeroCarta');

        inputCVV.addEventListener('input', function () {
            var cvv = this.value.replace(/\D/g, ''); // Rimuove tutti i caratteri non numerici
            if (cvv.length > 3) {
                this.value = cvv.slice(0, 3); // Tronca il CVV a tre cifre se contiene più di tre cifre
            }
        });

        inputCVV.addEventListener('blur', function () {
            var cvv = this.value.replace(/\D/g, ''); // Rimuove tutti i caratteri non numerici
            if (cvv.length !== 3) {
                alert("Il CVV deve contenere esattamente tre cifre."); // Avvisa l'utente se il CVV non contiene tre cifre
                this.value = ''; // Rimuovi il valore inserito
            }
        });

        inputNumeroCarta.addEventListener('input', function () {
            // Limita il numero di caratteri a 16
            if (this.value.length > 16) {
                this.value = this.value.slice(0, 16);
            }
        });

        inputNumeroCarta.addEventListener('blur', function () {
            // Rimuovi tutti i caratteri non numerici
            var cardNumber = this.value.replace(/\D/g, '');
            // Controlla se il numero della carta ha esattamente 16 cifre
            if (cardNumber.length !== 16) {
                alert("Il numero della carta di credito deve contenere 16 cifre.");
            }
            // Aggiorna il valore dell'input con il numero di carta formattato
            this.value = cardNumber.replace(/(\d{4})/g, '$1 ').trim(); // Formatta il numero di carta per gruppi di 4 cifre
        });

        inputScadenza.addEventListener('blur', function () {
            // Verifica se la data è passata
            var currentDate = new Date();
            var currentMonth = currentDate.getMonth() + 1; // Il mese corrente è 0-based
            var currentYear = currentDate.getFullYear() % 100; // Anno a due cifre
            var inputDate = this.value.split('/');
            var inputMonth = parseInt(inputDate[0], 10);
            var inputYear = parseInt(inputDate[1], 10);

            if (inputYear < currentYear || (inputYear === currentYear && inputMonth < currentMonth)) {
                alert("La data di scadenza della carta è già passata.");
                this.value = ''; // Cancella il valore inserito
            }
           
        });
    });
</script>


